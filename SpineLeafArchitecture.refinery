% Metamodel of a general Fabric Network with explicitly defined physical & logical connections

% define a FabricNetwork as the network summoning all the organizations and channels between them
abstract class FabricNetwork {
    contains Organization[1..*] organizations    
    contains Channel[1..*] channels    
}

class KafkaFabricNetwork extends FabricNetwork.
class RaftFabricNetwork extends FabricNetwork.

class Channel {
    contains Ledger[1] ledger opposite channel
    OrderingNode[] orderedBy opposite orders
}

% single logical ledger exists in the scope of single channels
class Ledger {
    container Channel channel opposite ledger
}

% trusted member of the network enrolled via adding its MSP to the network
class Organization {
    contains HardwareDevice[] internalInfra
    contains Router[1..*] infraRouter
    contains SpineSwitch[1..*] infraSpineSwitch
    contains LeafSwitch[1..*] infraLeafSwitch
    contains Host[1..*] infraHost
}

% any hardware device managed by an organization or their cloud provider
abstract class HardwareDevice.

class Router extends HardwareDevice {
    % what is the purpose of interconnecting routers in spine & leaf architecture?
    % or the routers are connected by default due to the nature of a device? meaning it can transmit packets to any router without a "dedicated" connection
    Router[] routerConnection
    SpineSwitch[1..*] downwardAggregation opposite upwardCore
}

abstract class Switch extends HardwareDevice.

class SpineSwitch extends Switch {
    Router[1..*] upwardCore opposite downwardAggregation
    LeafSwitch[1..*] downwardAccess opposite upwardAggregation
}

class LeafSwitch extends Switch {
    SpineSwitch[1..*] upwardAggregation opposite downwardAccess
    Host[1..*] downwardHost opposite upwardAccess
}

class Host extends HardwareDevice {
    LeafSwitch[1..*] upwardAccess opposite downwardHost
    contains Node[1..4] nodes
}

% defines unit of software operating in the environment of a network
abstract class Node.

% (also called peer) collective of nodes that maintain a ledger and runs chaincode containers
class EndorsingNode extends Node {
    Chaincode[] endorses opposite endorsedBy
}

% (also called orderer) collective of nodes that orders transactions into a block 
% and distributes blocks to connected peers for validation and commit
class OrderingNode extends Node {
    Channel[] orders opposite orderedBy
}

% chaincode is installed on peers and then defined & used on one or more channels
class Chaincode {
    EndorsingNode[] endorsedBy opposite endorses
}

% auxilary predicate to identify hardware devices managed by the same organization
pred sameOrganizationInfra(HardwareDevice hd1, HardwareDevice hd2) <->
    Organization(o),
    internalInfra(o, hd1),
    internalInfra(o, hd2).

% define a constraint telling that routers cannot be connected to themselves
error routerNonConnectivityToItself(Router r) <->
    routerConnection(r, r).

% define a mesh topology for routers in the network
error routerMeshTopology(Router r1, Router r2) <->
    !routerConnection(r1, r2),
    r1 != r2.

% computationally expensive constraint definitions 
% define that hardware devices of different organizations cannot have any physical connections
error CoreAggregationLayer(Router r, SpineSwitch ss) <->
    !sameOrganizationInfra(r, ss),
    downwardAggregation(r, ss).

error AggregationLeafLayer(SpineSwitch ss, LeafSwitch ls) <->
    !sameOrganizationInfra(ss, ls),
    downwardAccess(ss, ls).

error AccessHostLayer(LeafSwitch ls, Host h) <->
    !sameOrganizationInfra(ls, h),
    downwardHost(ls, h).

organizations(N1, Org1).
organizations(N1, Org2).

scope FabricNetwork = 1, Organization = 2, Router = 2, SpineSwitch = 2, LeafSwitch = 2, Host = 2, Node = 2, Chaincode = 1.
